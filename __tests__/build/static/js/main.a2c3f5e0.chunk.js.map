{"version":3,"sources":["modules/views/courses/styled.tsx","modules/services/api/adapter.ts","modules/services/api/config.ts","modules/views/shared/app.tsx","modules/views/shared/routes.tsx","modules/views/shared/root.tsx","modules/views/courses/index.tsx","modules/hooks/use-units.ts","modules/hooks/use-title.ts","modules/hooks/use-query.ts","modules/views/shared/sw.ts","modules/redux/features/counter/counterSlice.ts","modules/redux/app/store.ts","index.tsx","modules/services/index.ts","modules/services/nx/index.ts","modules/services/api/index.ts"],"names":["Aside","styled","ReactBurgerMenu","Body","div","Iframe","iframe","EmptyIcon","i","nx","declare","extends","AbstractRequest","methods","request","inMethod","inUrl","inData","inOptions","fetch","method","data","then","res","json","host","process","items","units","renderRoutes","routes","path","exact","component","Root","Courses","StyledRoot","section","props","className","qs","useQuery","useUnits","from","useState","pin","setPin","useTitle","trigger","value","$rc","layout","nodeName","onClick","e","cx","style","overflow","ife","virtual","length","map","unit","index","key","id","to","uid","padIndex","step","short_name","centered","title","element","src","React","setData","useEffect","$api","inTitle","document","hashlize","useLocation","search","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","registration","catch","error","console","message","counterSlice","createSlice","name","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","store","configureStore","reducer","counter","counterReducer","ReactDOM","render","StrictMode","getElementById","ReactLayoutTrbla","ReactIfElse","statics","apis","init","this","httpRestConfig","Adapter","getInstance","Config"],"mappings":"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","file":"static/js/main.a2c3f5e0.chunk.js","sourcesContent":["import ReactBurgerMenu from '@feizheng/react-burger-menu';\n\nexport const Aside = styled(ReactBurgerMenu)`\n  position: absolute;\n  left: 20px;\n  top: 20px;\n  .react-burger-menu__trigger {\n    padding: 14px;\n    z-index: 2;\n  }\n`;\n\nexport const Body = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Iframe = styled.iframe`\n  width: 100%;\n  height: 100%;\n  border: none;\n`;\n\nexport const EmptyIcon = styled.i`\n  font-size: 100px;\n  color: #ddd;\n  margin-bottom: 10px;\n`;\n","export default nx.declare({\n  extends: nx.AbstractRequest,\n  methods: {\n    request(inMethod: string, inUrl: string, inData: any, inOptions: any) {\n      return fetch(inUrl, {\n        method: inMethod,\n        data: inData,\n        ...inOptions,\n      }).then((res) => res.json());\n    },\n  },\n});\n","export default {\n  host: process.env.REACT_APP_API_URL,\n  request: ['/h5', 'json'],\n  items: [\n    {\n      items: {\n        units: ['get', '/courses/{id}/json_concat'],\n      },\n    },\n  ],\n};\n","import { renderRoutes } from 'react-router-config';\nimport { HashRouter as Router } from 'react-router-dom';\nimport routes from './routes';\n\nexport default () => {\n  return <Router>{renderRoutes(routes)}</Router>;\n};\n","import Root from './root';\nimport Courses from '@/modules/views/courses';\n\nexport default [\n  {\n    path: '/',\n    exact: true,\n    component: Root,\n  },\n  {\n    path: '/courses',\n    component: Courses,\n  },\n];\n","const StyledRoot = styled.section`\n  color: red;\n`;\n\nexport default (props: any) => {\n  return <StyledRoot className=\"app-root\" {...props} />;\n};\n","import { NavLink } from 'react-router-dom';\nimport useUnits from '@/modules/hooks/use-units';\nimport useTitle from '@/modules/hooks/use-title';\nimport useQuery from '@/modules/hooks/use-query';\nimport { Aside, Body, Iframe, EmptyIcon } from './styled';\nimport ReactIfElse from '@feizheng/react-if-else';\nimport ReactEmptyState from '@feizheng/react-empty-state';\nimport { useState } from 'react';\nimport ReactAbsoluteRect from '@feizheng/react-absolute-rect';\n\n\nexport default (props: any) => {\n  const qs = useQuery();\n  const units = useUnits({ ...qs, from: 'kelly' });\n  const [pin, setPin] = useState(false);\n  const trigger = (props: any) => {\n    return (\n      <button className=\"button is-primary\" {...props}>\n        <i className=\"icon ion-android-menu\" />\n        <span className=\"ml-1\">课程列表</span>\n      </button>\n    );\n  };\n\n  useTitle('课程预览');\n\n  return (\n    <section className=\"app-courses\">\n      <Aside className=\"menu\" trigger={trigger} value={pin}>\n        <nx.$rc.layout nodeName=\"dl\" value=\"ta\" className=\"menu-list\">\n          <dt className=\"is-flex is-justify-content-space-between is-align-items-center title menu-label\">\n            <span>\n              <i className=\"icon ion-pound\" />\n              <span>课程列表</span>\n            </span>\n            <a\n              onClick={(e) => {\n                setPin(!pin);\n              }}\n              className={cx('is-flex is-align-items-center', {\n                'has-text-primary': pin,\n              })}>\n              <i className=\"is-size-5 icon ion-pin\" />\n              <span>钉住我</span>\n            </a>\n          </dt>\n          <dd className=\"is-relative\" style={{ overflow: 'auto' }}>\n            <ReactAbsoluteRect>\n              <nx.$rc.ife virtual value={units.length}>\n                {units.map((unit: any, index: number) => (\n                  <NavLink\n                    key={unit.id}\n                    to={`/courses?id=${qs.id}&uid=${unit.id}`}\n                    className={cx({ 'is-active': unit.id == qs.uid })}>\n                    <i className=\"is-size-7 icon ion-arrow-right-b\" />\n                    <span>\n                      {nx.padIndex(index, { step: 1 })}-{unit.short_name}\n                    </span>\n                  </NavLink>\n                ))}\n                <ReactEmptyState\n                  centered\n                  title=\"空空如也\"\n                  element={<EmptyIcon className=\"icon ion-android-compass\" />}\n                />\n              </nx.$rc.ife>\n            </ReactAbsoluteRect>\n          </dd>\n        </nx.$rc.layout>\n      </Aside>\n      <Body className=\"is-body\">\n        <ReactIfElse virtual value={qs.id && qs.uid}>\n          <Iframe\n            src={`https://tamic.alo7.com/latest/index.html?unitId=${qs.uid}&env=product&preview=true&channel=kellis&action=unit_preview`}\n          />\n          <ReactEmptyState\n            centered\n            title=\"请点击左上角切换课程\"\n            element={<EmptyIcon className=\"icon ion-planet\" />}\n          />\n        </ReactIfElse>\n      </Body>\n    </section>\n  );\n};\n","interface RequestParams {\n  id: string;\n  from: string;\n}\n\nexport default (request: RequestParams) => {\n  const [data, setData] = React.useState(null);\n\n  React.useEffect(() => {\n    nx.$api.units({ id: request.id, from: 'kelly' }).then((res: any) => {\n      setData(res.data);\n    });\n  }, [request.id]);\n\n  return data || [];\n};\n","import { useEffect } from 'react';\n\nexport default (inTitle: string) => {\n  useEffect(() => {\n    document.title = inTitle;\n  }, [inTitle]);\n};\n","import { useLocation } from 'react-router-dom';\n\nexport default () => {\n  return nx.hashlize(useLocation().search);\n};\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state): void => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state): void => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>): void => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import '@/assets/styles/index.scss';\r\nimport '@/modules/services';\r\n\r\nimport App from '@/modules/views/shared/app';\r\nimport * as serviceWorker from '@/modules/views/shared/sw';\r\nimport { store } from '@/modules/redux/app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import './nx';\nimport './api';\n\n","import ReactLayoutTrbla from '@feizheng/react-layout-trbla';\nimport ReactIfElse from '@feizheng/react-if-else';\n\n// nx packages:\nimport '@feizheng/next-js-core2';\nimport '@feizheng/next-abstract-request';\nimport '@feizheng/next-pad-index';\nimport '@feizheng/next-hashlize';\n\n\n\n\nnx.$rc = {\n    layout: ReactLayoutTrbla,\n    ife: ReactIfElse,\n};\n","import httpRestConfig from '@feizheng/http-rest-config';\nimport Adapter from './adapter';\nimport Config from './config';\n\nexport default nx.declare({\n  statics: {\n    apis: {},\n    init() {\n      nx.$api = this.apis;\n      httpRestConfig(this.apis, Adapter.getInstance(), Config);\n    },\n  },\n});\n"],"sourceRoot":""}